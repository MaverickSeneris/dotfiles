# All the default Omarchy aliases and functions
# (don't mess with these directly, just overwrite them here!)
source ~/.local/share/omarchy/default/bash/rc

# Add your own exports, aliases, and functions here.
#
# Make an alias for invoking commands you use constantly
# alias p='python'
#export PATH="$HOME/.cargo/bin:$PATH"
#alias s='python3 ~/.cli_ai_assistant/launcher.py'

fastfetch


# ==============================
# 🌤️ DYNAMIC WELCOME MESSAGE
# ==============================
hour=$(date +%H)
user=$USER

if [ $hour -ge 5 ] && [ $hour -lt 11 ]; then
    icon="🌅"
    greet="Good morning"
elif [ $hour -ge 11 ] && [ $hour -lt 17 ]; then
    icon="☀️"
    greet="Good afternoon"
elif [ $hour -ge 17 ] && [ $hour -lt 20 ]; then
    icon="🌇"
    greet="Good evening"
else
    icon="🌙"
    greet="Good night"
fi

echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
echo -e " $icon  $greet, $user!"
echo -e " 💡  Run \e[1;33mbp list\e[0m to view available command prompts, or \e[1;33mcheat\e[0m for a basic Bash cheat sheet."
echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"

#######################
## EDIT BASH PROMPTS ##
#######################
# go to home directory
alias home='cd ~'
# go to root directory
alias root='cd /'
# edit bashrc prompts
alias eb='nvim ~/.bashrc' 
# edit bashrc prompts
alias rb='source ~/.bashrc'
# Edit config
# edit .config files
alias ec='nvim ~/.config'
# edit .local files
alias el='nvim ~/.local'
# Show all commands ever typed
alias history='cat ~/.bash_history'
# 'cpp' shows progress when copying files
alias cpp='rsync -ah --progress'

#################
## SAFE REMOVE ##
#################
# Safe delete: moves file to Trash
rm() {
    if [ "$#" -eq 0 ]; then
        echo -e "\e[31m⚠️  No file specified.\e[0m"
        return 1
    fi
    trash-put "$@"
    echo -e "\e[32m✅ Moved to Trash:\e[0m $@"
}

# List trashed files (with empty feedback)
lstr() {
    if [ -z "$(trash-list)" ]; then
        echo -e "\e[31m🧺 Trash is empty.\e[0m"
    else
        echo -e "\e[34m🗂️  Files in Trash:\e[0m"
        trash-list
    fi
}

# Restore trashed files
rstr() {
    if [ "$#" -eq 0 ]; then
        echo -e "\e[31m⚠️  Please specify a file number to restore.\e[0m"
        return 1
    fi
    trash-restore "$@"
    echo -e "\e[32m♻️  Restored item(s):\e[0m $@"
}

# Empty Trash (with confirmation)
emtr() {
    read -p $'\e[33m⚠️  Empty Trash? (y/N): \e[0m' confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        trash-empty
        echo -e "\e[32m🧹 Trash emptied successfully.\e[0m"
    else
        echo -e "\e[34m🧺 Trash not emptied.\e[0m"
    fi
}


################################
## PACKAGE MANAGEMENT ALIASES ##
################################
# Pacman install and query
alias pinstall='sudo pacman -S'
alias pacq='pacman -Ss'
# Yay install and query (AUR)
alias ainstall='yay -S'
alias yayq='yay -Ss'


############################
## EDIT HYPRLAND PLUG-INS ##
############################
alias eh='nvim ~/.config/hypr' # edit hyprland configs
alias ew='nvim ~/.config/waybar' # edit waybar configs
alias ehb='nvim ~/.config/hypr/bindings.conf' # edit hyprland bindings

####################
### GIT COMMANDS ###
####################
# gclone [user] [repo] → clone via SSH (git@github.com:user/repo.git)
alias gc='function _gclone(){ git clone git@github.com:$1/$2.git; }; _gclone'
# gpush [message] → add, commit, and push (defaults to "update" if no message)
alias gp='function _gpush(){ msg=${1:-update}; git add . && git commit -m "$msg" && git push; }; _gpush'

#######################
## HARDWARE PROMPTS ##
######################
alias kbu="brightnessctl -d smc::kbd_backlight s 10%+"
alias kbd="brightnessctl -d smc::kbd_backlight s 10%-"
alias bh="upower -i \$(upower -e | grep BAT) | grep -E 'state|time to empty|time to full|percentage|capacity|energy|energy-full|energy-rate|voltage|cycle|model|serial'"

################################
## SYSTEM MAINTENANCE PRPOMTS ##
################################
# Run rkhunter: update + full scan no skip
alias vs='sudo rkhunter --update && sudo rkhunter --propupd && sudo rkhunter --check --sk --nocolors --report-warnings-only'
alias fm="watch -n1 sensors" # fan monitor

###############################
## DYNAMIC BASH PROMPTS HELP ##
###############################
# bp - Bash Prompt Helper
# Shows a list of all aliases or detailed info about a specific alias/function.
# Usage:
#   bp list  → shows all aliases
#   bp <name> → shows command and description of an alias or function
bp() {
    local alias_name=$1
    local bashrc="$HOME/.bashrc"

    # LIST ALL ALIASES & FUNCTIONS DYNAMICALLY
    if [[ "$alias_name" == "list" ]]; then
        echo -e "\e[1;36m#################################\e[0m"
        echo -e "\e[1;36m###  YOUR CUSTOM BASH PROMPTS ###\e[0m"
        echo -e "\e[1;36m#################################\e[0m"
        echo

        # ----- Aliases -----
        echo -e "\e[1;34m🔹 ALIASES:\e[0m"
        grep "^alias " "$bashrc" | while read -r line; do
            name=$(echo "$line" | awk -F'[ =]' '{print $2}')
            cmd=$(echo "$line" | sed -n "s/^alias $name='\(.*\)'.*/\1/p")
            desc=$(echo "$line" | grep -oP '(?<=# ).*')
            printf "  \e[1;32m%-10s\e[0m - %s\n" "$name" "${desc:-$cmd}"
        done

        echo
        # ----- Functions -----
        echo -e "\e[1;34m🔹 FUNCTIONS:\e[0m"
        grep -E '^[a-zA-Z_][a-zA-Z0-9_]*\(\)' "$bashrc" | while read -r line; do
            fname=$(echo "$line" | cut -d'(' -f1 | xargs)
            desc=$(grep -A1 "^$fname()" "$bashrc" | grep -m1 -oP '(?<=# ).*')
            printf "  \e[1;33m%-10s\e[0m - %s\n" "$fname" "${desc:-function in ~/.bashrc}"
        done

        echo
        echo -e "\e[1;36mHELP SYSTEM:\e[0m"
        echo "  bp [alias|function] - detailed info about an alias or function"
        echo "  bp list              - show all custom aliases & functions"
        return
    fi

    # SHOW DETAILS FOR SPECIFIC ALIAS OR FUNCTION
 
# SHOW DETAILS FOR SPECIFIC ALIAS OR FUNCTION

# SHOW DETAILS FOR SPECIFIC ALIAS OR FUNCTION
if alias "$alias_name" &>/dev/null; then
    line_num=$(grep -n "^alias $alias_name=" "$bashrc" | cut -d: -f1)
    line=$(sed -n "${line_num}p" "$bashrc")
    cmd=$(echo "$line" | sed -n "s/^alias $alias_name='\(.*\)'.*/\1/p")

    # check for comment on the same line OR the line above
    desc=$(grep -A0 -B1 "^alias $alias_name=" "$bashrc" | grep -m1 -oP '(?<=# ).*')

    echo -e "\e[1;32mAlias:\e[0m $alias_name"
    echo -e "\e[1;34mCommand:\e[0m $cmd"
    [[ -n "$desc" ]] && echo -e "\e[1;33mDescription:\e[0m $desc" || echo "Description: (no comment found)"


elif declare -F "$alias_name" &>/dev/null; then
    echo -e "\e[1;33mFunction:\e[0m $alias_name"

    # find the line number where the function is defined
    line_num=$(grep -n "^$alias_name()" "$bashrc" | cut -d: -f1)

    # look up to 3 lines above for a comment
    desc=$(awk -v n="$line_num" 'NR>=n-3 && NR<n {if ($0 ~ /#/) desc=$0} END{gsub(/^.*# /, "", desc); print desc}' "$bashrc")

    if [[ -n "$desc" ]]; then
        echo -e "\e[1;33mDescription:\e[0m $desc"
    else
        echo "Description: (no comment found)"
    fi
fi



}


# ==============================
# 📘 BASIC BASH CHEAT SHEET
# ==============================

# 📘 BASIC BASH CHEAT SHEET
cheat() {
    echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
    echo -e " 🧠  \e[1;33mBasic Bash Command Cheat Sheet\e[0m"
    echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"

    echo -e "\e[1;32mNavigation:\e[0m"
    echo -e "  \e[1;33mcd [dir]\e[0m           – change directory"
    echo -e "  \e[1;33mpwd\e[0m               – print current directory"
    echo -e "  \e[1;33mls -la\e[0m            – list all files (detailed)"
    echo

    echo -e "\e[1;32mFile Management:\e[0m"
    echo -e "  \e[1;33mcp src dest\e[0m        – copy files"
    echo -e "  \e[1;33mmv src dest\e[0m        – move or rename files"
    echo -e "  \e[1;33mrm -rf [file]\e[0m      – remove file/folder (forcefully)"
    echo -e "  \e[1;33mtouch file.txt\e[0m     – create empty file"
    echo -e "  \e[1;33mmkdir folder\e[0m       – create folder"
    echo

    echo -e "\e[1;32mText & Search:\e[0m"
    echo -e "  \e[1;33mcat file\e[0m           – display file contents"
    echo -e "  \e[1;33mgrep 'word' file\e[0m   – search for text in file"
    echo -e "  \e[1;33mless file\e[0m          – view file page by page"
    echo -e "  \e[1;33mhead/tail file\e[0m     – show first/last lines"
    echo

    echo -e "\e[1;32mNetworking:\e[0m"
    echo -e "  \e[1;33mping google.com\e[0m    – check connection"
    echo -e "  \e[1;33mcurl url\e[0m           – fetch data from the web"
    echo -e "  \e[1;33mwget url\e[0m           – download file"
    echo

    echo -e "\e[1;32mSystem Info:\e[0m"
    echo -e "  \e[1;33mtop / btop\e[0m         – show processes"
    echo -e "  \e[1;33mfree -h\e[0m            – check memory"
    echo -e "  \e[1;33mdf -h\e[0m              – check disk usage"
    echo -e "  \e[1;33mwhoami\e[0m             – show current user"
    echo -e "  \e[1;33muptime\e[0m             – system uptime"
    echo

    echo -e "\e[1;32mPackage Management:\e[0m"
    echo -e "  \e[1;33msudo pacman -S pkg\e[0m – install package"
    echo -e "  \e[1;33msudo pacman -R pkg\e[0m – remove package"
    echo -e "  \e[1;33myay -S pkg\e[0m         – install from AUR"
    echo -e "  \e[1;33myay -Ss keyword\e[0m    – search AUR packages"
    echo

    echo -e "\e[1;32mOther Useful Commands:\e[0m"
    echo -e "  \e[1;33mhistory\e[0m            – show command history"
    echo -e "  \e[1;33mclear\e[0m              – clear terminal"
    echo -e "  \e[1;33mecho 'text'\e[0m        – print text"
    echo -e "  \e[1;33mexit\e[0m              – close terminal"
    echo -e "\e[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\e[0m"
}

# ==========================
# 💾 BASHRC BACKUP
# ==========================

# Create backup of .bashrc to ~/Projects/dotfiles/bashrc
backupbash() {
    local backup_dir=~/Projects/dotfiles/bashrc
    local timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
    local backup_file="$backup_dir/.bashrc_backup_$timestamp"

    mkdir -p "$backup_dir"

    # Delete any previous backups
    rm -f "$backup_dir"/.bashrc_backup_*

    # Create new backup
    cp ~/.bashrc "$backup_file"

    echo -e "\e[32m✅ Backup created:\e[0m $backup_file"
}

